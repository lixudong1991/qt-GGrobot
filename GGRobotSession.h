// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `GGRobotSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __E__vspro_TESTice_TESTice_generated_GGRobotSession_h__
#define __E__vspro_TESTice_TESTice_generated_GGRobotSession_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/BuiltinSequences.h>
#include <Glacier2/Session.h>
#include <GGSmart.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace GGSmart
{

class RobotCallback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::RobotCallback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GGSmart::RobotCallback*);

class RobotSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::RobotSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GGSmart::RobotSession*);

}

}

namespace GGSmart
{

class RobotCallback;
::Ice::Object* upCast(::GGSmart::RobotCallback*);
typedef ::IceInternal::Handle< ::GGSmart::RobotCallback> RobotCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::RobotCallback> RobotCallbackPrx;
void __patch(RobotCallbackPtr&, const ::Ice::ObjectPtr&);

class RobotSession;
::Ice::Object* upCast(::GGSmart::RobotSession*);
typedef ::IceInternal::Handle< ::GGSmart::RobotSession> RobotSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::RobotSession> RobotSessionPrx;
void __patch(RobotSessionPtr&, const ::Ice::ObjectPtr&);

}

namespace GGSmart
{

class AMD_RobotCallback_doOrder : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::GGSmart::AMD_RobotCallback_doOrder> AMD_RobotCallback_doOrderPtr;

class AMD_RobotSession_UpdateRobotInfo : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::GGSmart::AMD_RobotSession_UpdateRobotInfo> AMD_RobotSession_UpdateRobotInfoPtr;

}

namespace IceAsync
{

namespace GGSmart
{

class AMD_RobotCallback_doOrder : public ::GGSmart::AMD_RobotCallback_doOrder, public ::IceInternal::IncomingAsync
{
public:

    AMD_RobotCallback_doOrder(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_RobotSession_UpdateRobotInfo : public ::GGSmart::AMD_RobotSession_UpdateRobotInfo, public ::IceInternal::IncomingAsync
{
public:

    AMD_RobotSession_UpdateRobotInfo(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace GGSmart
{

class Callback_RobotCallback_doOrder_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RobotCallback_doOrder_Base> Callback_RobotCallback_doOrderPtr;

class Callback_RobotSession_SetCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RobotSession_SetCallback_Base> Callback_RobotSession_SetCallbackPtr;

class Callback_RobotSession_UpdateRobotInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RobotSession_UpdateRobotInfo_Base> Callback_RobotSession_UpdateRobotInfoPtr;

}

namespace IceProxy
{

namespace GGSmart
{

class RobotCallback : virtual public ::IceProxy::Ice::Object
{
public:

    void doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg)
    {
        doOrder(__p_msg, 0);
    }
    void doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::Context& __ctx)
    {
        doOrder(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_doOrder(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_doOrder(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_doOrder(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_doOrder(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg)
    {
        return begin_doOrder(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_doOrder(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_doOrder(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_doOrder(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::Callback_RobotCallback_doOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_doOrder(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_doOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::Context& __ctx, const ::GGSmart::Callback_RobotCallback_doOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_doOrder(__p_msg, &__ctx, __del, __cookie);
    }

    void end_doOrder(const ::Ice::AsyncResultPtr&);
    
private:

    void doOrder(const ::GGSmart::GGOrderMsgPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_doOrder(const ::GGSmart::GGOrderMsgPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_secure(bool __secure) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_twoway() const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_oneway() const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_batchOneway() const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_datagram() const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_batchDatagram() const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_compress(bool __compress) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RobotCallback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RobotCallback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RobotSession : virtual public ::IceProxy::Glacier2::Session
{
public:

    void SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt)
    {
        SetCallback(__p_cb, __p_rt, 0);
    }
    void SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx)
    {
        SetCallback(__p_cb, __p_rt, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetCallback(__p_cb, __p_rt, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetCallback(__p_cb, __p_rt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetCallback(__p_cb, __p_rt, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetCallback(__p_cb, __p_rt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt)
    {
        return begin_SetCallback(__p_cb, __p_rt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx)
    {
        return begin_SetCallback(__p_cb, __p_rt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCallback(__p_cb, __p_rt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCallback(__p_cb, __p_rt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::GGSmart::Callback_RobotSession_SetCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCallback(__p_cb, __p_rt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::GGSmart::Callback_RobotSession_SetCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCallback(__p_cb, __p_rt, &__ctx, __del, __cookie);
    }

    void end_SetCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void SetCallback(const ::GGSmart::RobotCallbackPrx&, const ::GGSmart::RobotPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::RobotCallbackPrx&, const ::GGSmart::RobotPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt)
    {
        UpdateRobotInfo(__p_rt, 0);
    }
    void UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx)
    {
        UpdateRobotInfo(__p_rt, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_UpdateRobotInfo(__p_rt, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateRobotInfo(__p_rt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_UpdateRobotInfo(__p_rt, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateRobotInfo(__p_rt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt)
    {
        return begin_UpdateRobotInfo(__p_rt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx)
    {
        return begin_UpdateRobotInfo(__p_rt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateRobotInfo(__p_rt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateRobotInfo(__p_rt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::GGSmart::Callback_RobotSession_UpdateRobotInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateRobotInfo(__p_rt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::GGSmart::Callback_RobotSession_UpdateRobotInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateRobotInfo(__p_rt, &__ctx, __del, __cookie);
    }

    void end_UpdateRobotInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void UpdateRobotInfo(const ::GGSmart::RobotPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UpdateRobotInfo(const ::GGSmart::RobotPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RobotSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_twoway() const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_oneway() const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_batchOneway() const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_datagram() const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_batchDatagram() const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RobotSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RobotSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace GGSmart
{

class RobotCallback : virtual public ::Ice::Object
{
public:

    typedef RobotCallbackPrx ProxyType;
    typedef RobotCallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void doOrder_async(const ::GGSmart::AMD_RobotCallback_doOrderPtr&, const ::GGSmart::GGOrderMsgPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___doOrder(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RobotCallback& l, const RobotCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RobotCallback& l, const RobotCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RobotSession : virtual public ::Glacier2::Session
{
public:

    typedef RobotSessionPrx ProxyType;
    typedef RobotSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SetCallback(const ::GGSmart::RobotCallbackPrx&, const ::GGSmart::RobotPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UpdateRobotInfo_async(const ::GGSmart::AMD_RobotSession_UpdateRobotInfoPtr&, const ::GGSmart::RobotPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UpdateRobotInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RobotSession& l, const RobotSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RobotSession& l, const RobotSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace GGSmart
{

template<class T>
class CallbackNC_RobotCallback_doOrder : public Callback_RobotCallback_doOrder_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RobotCallback_doOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RobotCallback_doOrderPtr
newCallback_RobotCallback_doOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotCallback_doOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RobotCallback_doOrderPtr
newCallback_RobotCallback_doOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotCallback_doOrder<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RobotCallback_doOrderPtr
newCallback_RobotCallback_doOrder(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotCallback_doOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RobotCallback_doOrderPtr
newCallback_RobotCallback_doOrder(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotCallback_doOrder<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RobotCallback_doOrder : public Callback_RobotCallback_doOrder_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RobotCallback_doOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RobotCallback_doOrderPtr
newCallback_RobotCallback_doOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotCallback_doOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RobotCallback_doOrderPtr
newCallback_RobotCallback_doOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotCallback_doOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RobotCallback_doOrderPtr
newCallback_RobotCallback_doOrder(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotCallback_doOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RobotCallback_doOrderPtr
newCallback_RobotCallback_doOrder(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotCallback_doOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RobotSession_SetCallback : public Callback_RobotSession_SetCallback_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RobotSession_SetCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::RobotSessionPrx __proxy = ::GGSmart::RobotSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetCallback(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RobotSession_SetCallbackPtr
newCallback_RobotSession_SetCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotSession_SetCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RobotSession_SetCallbackPtr
newCallback_RobotSession_SetCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotSession_SetCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RobotSession_SetCallbackPtr
newCallback_RobotSession_SetCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotSession_SetCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RobotSession_SetCallbackPtr
newCallback_RobotSession_SetCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotSession_SetCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RobotSession_SetCallback : public Callback_RobotSession_SetCallback_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RobotSession_SetCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::RobotSessionPrx __proxy = ::GGSmart::RobotSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetCallback(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RobotSession_SetCallbackPtr
newCallback_RobotSession_SetCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotSession_SetCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RobotSession_SetCallbackPtr
newCallback_RobotSession_SetCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotSession_SetCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RobotSession_SetCallbackPtr
newCallback_RobotSession_SetCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotSession_SetCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RobotSession_SetCallbackPtr
newCallback_RobotSession_SetCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotSession_SetCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RobotSession_UpdateRobotInfo : public Callback_RobotSession_UpdateRobotInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RobotSession_UpdateRobotInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::RobotSessionPrx __proxy = ::GGSmart::RobotSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_UpdateRobotInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RobotSession_UpdateRobotInfoPtr
newCallback_RobotSession_UpdateRobotInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotSession_UpdateRobotInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RobotSession_UpdateRobotInfoPtr
newCallback_RobotSession_UpdateRobotInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotSession_UpdateRobotInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RobotSession_UpdateRobotInfoPtr
newCallback_RobotSession_UpdateRobotInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotSession_UpdateRobotInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RobotSession_UpdateRobotInfoPtr
newCallback_RobotSession_UpdateRobotInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RobotSession_UpdateRobotInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RobotSession_UpdateRobotInfo : public Callback_RobotSession_UpdateRobotInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RobotSession_UpdateRobotInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::RobotSessionPrx __proxy = ::GGSmart::RobotSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_UpdateRobotInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RobotSession_UpdateRobotInfoPtr
newCallback_RobotSession_UpdateRobotInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotSession_UpdateRobotInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RobotSession_UpdateRobotInfoPtr
newCallback_RobotSession_UpdateRobotInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotSession_UpdateRobotInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RobotSession_UpdateRobotInfoPtr
newCallback_RobotSession_UpdateRobotInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotSession_UpdateRobotInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RobotSession_UpdateRobotInfoPtr
newCallback_RobotSession_UpdateRobotInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RobotSession_UpdateRobotInfo<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
