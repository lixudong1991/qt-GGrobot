// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `GGRobotSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <GGRobotSession.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <Ice/SlicedData.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __GGSmart__RobotCallback__doOrder_name = "doOrder";

const ::std::string __GGSmart__RobotSession__SetCallback_name = "SetCallback";

const ::std::string __GGSmart__RobotSession__UpdateRobotInfo_name = "UpdateRobotInfo";

}

IceAsync::GGSmart::AMD_RobotCallback_doOrder::AMD_RobotCallback_doOrder(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::GGSmart::AMD_RobotCallback_doOrder::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::GGSmart::AMD_RobotSession_UpdateRobotInfo::AMD_RobotSession_UpdateRobotInfo(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::GGSmart::AMD_RobotSession_UpdateRobotInfo::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

void
IceAsync::GGSmart::AMD_RobotSession_UpdateRobotInfo::ice_exception(const ::std::exception& ex)
{
    if(const ::GGSmart::InvokeFailException* __ex = dynamic_cast<const ::GGSmart::InvokeFailException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
::IceProxy::Ice::Object* ::IceProxy::GGSmart::upCast(::IceProxy::GGSmart::RobotCallback* p) { return p; }

void
::IceProxy::GGSmart::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::RobotCallback>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::GGSmart::RobotCallback;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::GGSmart::RobotCallback::doOrder(const ::interfaceICE::ComStatusICEPrx& __p_recv, const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __GGSmart__RobotCallback__doOrder_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_recv);
        __os->write(__p_msg);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::RobotCallback::begin_doOrder(const ::interfaceICE::ComStatusICEPrx& __p_recv, const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__RobotCallback__doOrder_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__RobotCallback__doOrder_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_recv);
        __os->write(__p_msg);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::GGSmart::RobotCallback::end_doOrder(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __GGSmart__RobotCallback__doOrder_name);
}

const ::std::string&
IceProxy::GGSmart::RobotCallback::ice_staticId()
{
    return ::GGSmart::RobotCallback::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::GGSmart::RobotCallback::__newInstance() const
{
    return new RobotCallback;
}
::IceProxy::Ice::Object* ::IceProxy::GGSmart::upCast(::IceProxy::GGSmart::RobotSession* p) { return p; }

void
::IceProxy::GGSmart::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::RobotSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::GGSmart::RobotSession;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::GGSmart::RobotSession::SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__GGSmart__RobotSession__SetCallback_name);
    ::IceInternal::Outgoing __og(this, __GGSmart__RobotSession__SetCallback_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cb);
        __os->write(__p_rt);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::RobotSession::begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__GGSmart__RobotSession__SetCallback_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__RobotSession__SetCallback_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__RobotSession__SetCallback_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cb);
        __os->write(__p_rt);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::GGSmart::RobotSession::__begin_SetCallback(const ::GGSmart::RobotCallbackPrx& __p_cb, const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::GGSmart::RobotSessionPrx __proxy = ::GGSmart::RobotSessionPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_SetCallback(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_SetCallback(__p_cb, __p_rt, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::GGSmart::RobotSession::end_SetCallback(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __GGSmart__RobotSession__SetCallback_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::GGSmart::RobotSession::UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__GGSmart__RobotSession__UpdateRobotInfo_name);
    ::IceInternal::Outgoing __og(this, __GGSmart__RobotSession__UpdateRobotInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rt);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::RobotSession::begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__GGSmart__RobotSession__UpdateRobotInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__RobotSession__UpdateRobotInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__RobotSession__UpdateRobotInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rt);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::GGSmart::RobotSession::__begin_UpdateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::GGSmart::RobotSessionPrx __proxy = ::GGSmart::RobotSessionPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_UpdateRobotInfo(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_UpdateRobotInfo(__p_rt, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::GGSmart::RobotSession::end_UpdateRobotInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __GGSmart__RobotSession__UpdateRobotInfo_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

const ::std::string&
IceProxy::GGSmart::RobotSession::ice_staticId()
{
    return ::GGSmart::RobotSession::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::GGSmart::RobotSession::__newInstance() const
{
    return new RobotSession;
}

::Ice::Object* GGSmart::upCast(::GGSmart::RobotCallback* p) { return p; }

namespace
{
const ::std::string __GGSmart__RobotCallback_ids[2] =
{
    "::GGSmart::RobotCallback",
    "::Ice::Object"
};

}

bool
GGSmart::RobotCallback::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__GGSmart__RobotCallback_ids, __GGSmart__RobotCallback_ids + 2, _s);
}

::std::vector< ::std::string>
GGSmart::RobotCallback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__GGSmart__RobotCallback_ids[0], &__GGSmart__RobotCallback_ids[2]);
}

const ::std::string&
GGSmart::RobotCallback::ice_id(const ::Ice::Current&) const
{
    return __GGSmart__RobotCallback_ids[0];
}

const ::std::string&
GGSmart::RobotCallback::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::GGSmart::RobotCallback";
    return typeId;
#else
    return __GGSmart__RobotCallback_ids[0];
#endif
}

::Ice::DispatchStatus
GGSmart::RobotCallback::___doOrder(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::interfaceICE::ComStatusICEPrx __p_recv;
    ::GGSmart::GGOrderMsgPtr __p_msg;
    __is->read(__p_recv);
    __is->read(__p_msg);
    __is->readPendingObjects();
    __inS.endReadParams();
    ::GGSmart::AMD_RobotCallback_doOrderPtr __cb = new IceAsync::GGSmart::AMD_RobotCallback_doOrder(__inS);
    try
    {
        doOrder_async(__cb, __p_recv, __p_msg, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __GGSmart__RobotCallback_all[] =
{
    "doOrder",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
GGSmart::RobotCallback::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__GGSmart__RobotCallback_all, __GGSmart__RobotCallback_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __GGSmart__RobotCallback_all)
    {
        case 0:
        {
            return ___doOrder(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
GGSmart::RobotCallback::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
GGSmart::RobotCallback::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
GGSmart::__patch(RobotCallbackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::GGSmart::RobotCallbackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::GGSmart::RobotCallback::ice_staticId(), v);
    }
}

::Ice::Object* GGSmart::upCast(::GGSmart::RobotSession* p) { return p; }

namespace
{
const ::std::string __GGSmart__RobotSession_ids[3] =
{
    "::GGSmart::RobotSession",
    "::Glacier2::Session",
    "::Ice::Object"
};

}

bool
GGSmart::RobotSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__GGSmart__RobotSession_ids, __GGSmart__RobotSession_ids + 3, _s);
}

::std::vector< ::std::string>
GGSmart::RobotSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__GGSmart__RobotSession_ids[0], &__GGSmart__RobotSession_ids[3]);
}

const ::std::string&
GGSmart::RobotSession::ice_id(const ::Ice::Current&) const
{
    return __GGSmart__RobotSession_ids[0];
}

const ::std::string&
GGSmart::RobotSession::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::GGSmart::RobotSession";
    return typeId;
#else
    return __GGSmart__RobotSession_ids[0];
#endif
}

::Ice::DispatchStatus
GGSmart::RobotSession::___SetCallback(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::GGSmart::RobotCallbackPrx __p_cb;
    ::GGSmart::RobotPtr __p_rt;
    __is->read(__p_cb);
    __is->read(__p_rt);
    __is->readPendingObjects();
    __inS.endReadParams();
    try
    {
        SetCallback(__p_cb, __p_rt, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::GGSmart::InvokeFailException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
GGSmart::RobotSession::___UpdateRobotInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::GGSmart::RobotPtr __p_rt;
    __is->read(__p_rt);
    __is->readPendingObjects();
    __inS.endReadParams();
    ::GGSmart::AMD_RobotSession_UpdateRobotInfoPtr __cb = new IceAsync::GGSmart::AMD_RobotSession_UpdateRobotInfo(__inS);
    try
    {
        UpdateRobotInfo_async(__cb, __p_rt, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __GGSmart__RobotSession_all[] =
{
    "SetCallback",
    "UpdateRobotInfo",
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
GGSmart::RobotSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__GGSmart__RobotSession_all, __GGSmart__RobotSession_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __GGSmart__RobotSession_all)
    {
        case 0:
        {
            return ___SetCallback(in, current);
        }
        case 1:
        {
            return ___UpdateRobotInfo(in, current);
        }
        case 2:
        {
            return ___destroy(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
GGSmart::RobotSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
GGSmart::RobotSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
GGSmart::__patch(RobotSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::GGSmart::RobotSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::GGSmart::RobotSession::ice_staticId(), v);
    }
}
